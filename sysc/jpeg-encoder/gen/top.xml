<?xml version="1.0" ?>
<!-- Automatically generated by ForSyDe -->
<!DOCTYPE process_network SYSTEM "forsyde.dtd" >
<process_network name="top">
	<signal name="fifo_0" moc="sdf" type="20bitmap_reader_output" source="read_bitmap_comb" source_port="oport1" target="bitmap_reader_fanout" target_port="port_0"/>
	<signal name="fifo_1" moc="sdf" type="20bitmap_reader_output" source="bitmap_reader_fanout" source_port="port_1" target="bitmap_reader_delay" target_port="iport1"/>
	<signal name="fifo_2" moc="sdf" type="20bitmap_reader_output" source="bitmap_reader_fanout" source_port="port_1" target="rgb_block_collector_comb" target_port="iport1"/>
	<signal name="fifo_3" moc="sdf" type="20bitmap_reader_output" source="bitmap_reader_delay" source_port="oport1" target="read_bitmap_comb" target_port="iport1"/>
	<signal name="fifo_4" moc="sdf" type="St5tupleIISt6vectorI20bitmap_reader_outputSaIS1_EES3_S3_S3_EE" source="rgb_block_collector_comb" source_port="oport1" target="rgb_blocks_unzipper" target_port="iport1"/>
	<signal name="fifo_5" moc="sdf" type="20bitmap_reader_output" source="rgb_blocks_unzipper" source_port="port_3" target="block_processor_1" target_port="port_0"/>
	<signal name="fifo_6" moc="sdf" type="20bitmap_reader_output" source="rgb_blocks_unzipper" source_port="port_2" target="block_processor_2" target_port="port_0"/>
	<signal name="fifo_7" moc="sdf" type="20bitmap_reader_output" source="rgb_blocks_unzipper" source_port="port_1" target="block_processor_3" target_port="port_0"/>
	<signal name="fifo_8" moc="sdf" type="20bitmap_reader_output" source="rgb_blocks_unzipper" source_port="port_0" target="block_processor_4" target_port="port_0"/>
	<signal name="fifo_9" moc="sdf" type="13encoded_block" source="block_processor_1" source_port="port_1" target="block_zipper" target_port="port_3"/>
	<signal name="fifo_10" moc="sdf" type="13encoded_block" source="block_processor_2" source_port="port_1" target="block_zipper" target_port="port_2"/>
	<signal name="fifo_11" moc="sdf" type="13encoded_block" source="block_processor_3" source_port="port_1" target="block_zipper" target_port="port_1"/>
	<signal name="fifo_12" moc="sdf" type="13encoded_block" source="block_processor_4" source_port="port_1" target="block_zipper" target_port="port_0"/>
	<signal name="fifo_13" moc="sdf" type="St5tupleIISt6vectorI13encoded_blockSaIS1_EES3_S3_S3_EE" source="block_zipper" source_port="oport1" target="merge_and_write_sink" target_port="iport1"/>
	<leaf_process name="bitmap_reader_delay">
		<port name="iport1" type="20bitmap_reader_output" direction="in"/>
		<port name="oport1" type="20bitmap_reader_output" direction="out"/>
		<process_constructor name="delay" moc="sdf">
			<argument name="init_val" value=""/>
		</process_constructor>
	</leaf_process>
	<leaf_process name="read_bitmap_comb">
		<port name="iport1" type="20bitmap_reader_output" direction="in"/>
		<port name="oport1" type="20bitmap_reader_output" direction="out"/>
		<process_constructor name="comb" moc="sdf">
			<argument name="_func" value="read_bitmap_comb_func"/>
			<argument name="o1toks" value="1"/>
			<argument name="i1toks" value="1"/>
		</process_constructor>
	</leaf_process>
	<leaf_process name="bitmap_reader_fanout">
		<port name="port_0" type="20bitmap_reader_output" direction="in"/>
		<port name="port_1" type="20bitmap_reader_output" direction="out"/>
		<process_constructor name="fanout" moc="sdf"/>
	</leaf_process>
	<leaf_process name="rgb_block_collector_comb">
		<port name="iport1" type="20bitmap_reader_output" direction="in"/>
		<port name="oport1" type="St5tupleIISt6vectorI20bitmap_reader_outputSaIS1_EES3_S3_S3_EE" direction="out"/>
		<process_constructor name="comb" moc="sdf">
			<argument name="_func" value="rgb_block_collector_comb_func"/>
			<argument name="o1toks" value="1"/>
			<argument name="i1toks" value="4"/>
		</process_constructor>
	</leaf_process>
	<leaf_process name="rgb_blocks_unzipper">
		<port name="iport1" type="St5tupleIISt6vectorI20bitmap_reader_outputSaIS1_EES3_S3_S3_EE" direction="in"/>
		<port name="port_3" type="20bitmap_reader_output" direction="out"/>
		<port name="port_2" type="20bitmap_reader_output" direction="out"/>
		<port name="port_1" type="20bitmap_reader_output" direction="out"/>
		<port name="port_0" type="20bitmap_reader_output" direction="out"/>
		<process_constructor name="unzipN" moc="sdf">
			<argument name="otoks" value="[1, 1, 1, 1]"/>
		</process_constructor>
	</leaf_process>
	<composite_process name="block_processor_1" component_name="block_processor_">
		<port name="port_0" type="20bitmap_reader_output" direction="in"/>
		<port name="port_1" type="13encoded_block" direction="out"/>
	</composite_process>
	<composite_process name="block_processor_2" component_name="block_processor_">
		<port name="port_0" type="20bitmap_reader_output" direction="in"/>
		<port name="port_1" type="13encoded_block" direction="out"/>
	</composite_process>
	<composite_process name="block_processor_3" component_name="block_processor_">
		<port name="port_0" type="20bitmap_reader_output" direction="in"/>
		<port name="port_1" type="13encoded_block" direction="out"/>
	</composite_process>
	<composite_process name="block_processor_4" component_name="block_processor_">
		<port name="port_0" type="20bitmap_reader_output" direction="in"/>
		<port name="port_1" type="13encoded_block" direction="out"/>
	</composite_process>
	<leaf_process name="block_zipper">
		<port name="port_3" type="13encoded_block" direction="in"/>
		<port name="port_2" type="13encoded_block" direction="in"/>
		<port name="port_1" type="13encoded_block" direction="in"/>
		<port name="port_0" type="13encoded_block" direction="in"/>
		<port name="oport1" type="St5tupleIISt6vectorI13encoded_blockSaIS1_EES3_S3_S3_EE" direction="out"/>
		<process_constructor name="zipN" moc="sdf">
			<argument name="itoks" value="[1, 1, 1, 1]"/>
		</process_constructor>
	</leaf_process>
	<leaf_process name="merge_and_write_sink">
		<port name="iport1" type="St5tupleIISt6vectorI13encoded_blockSaIS1_EES3_S3_S3_EE" direction="in"/>
		<process_constructor name="sink" moc="sdf">
			<argument name="_func" value="merge_and_write_sink_func"/>
		</process_constructor>
	</leaf_process>
</process_network>

